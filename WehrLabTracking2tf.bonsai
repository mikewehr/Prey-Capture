<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q1="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:ConvertColor">
          <q1:Conversion>Bgr2Hsv</q1:Conversion>
        </Combinator>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *

nosecolor = Scalar.Rgb(255,0,0)
headcolor = Scalar.Rgb(255,255,0)
comcolor = Scalar.Rgb(50,50,255)
linecolor = Scalar.Rgb(100,100,100)
orientationcolor = Scalar.Rgb(255,255,255)
linethickness = 7
circlethickness = 3

@returns(IplImage)
def process(value):
  image = value.Item1
  pt1 = value.Item2.Item1
  pt2 = value.Item2.Item2
  head1 = value.Item3.Item1
  head2 = value.Item3.Item2
  com1 = value.Item4.Item1
  com2 = value.Item4.Item2

  height = image.Size.Height
  width = image.Size.Width

  CV.Line(image,Point(pt1,pt2),Point(head1,head2),orientationcolor,thickness = 2)
  CV.Line(image,Point(com1,com2),Point(head1,head2),orientationcolor,thickness = 2)

  CV.Circle(image,Point(pt1,pt2),circlethickness,nosecolor,-1)
  CV.Circle(image,Point(head1,head2),circlethickness,headcolor,-1)
  CV.Circle(image,Point(com1,com2),circlethickness,comcolor,-1)
 
  return image
</q2:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globalx = 0
import math

@returns(int)
def process(value):
  global globalx
  com_x = value.Item1.Item1
  com_y = value.Item1.Item2
  extreme1_x = value.Item2.Item1
  extreme1_y = value.Item2.Item2
  extreme2_x = value.Item3.Item1
  extreme2_y = value.Item3.Item2

  distance1 = (extreme1_x - com_x)*(extreme1_x - com_x) + (extreme1_y - com_y)*(extreme1_y - com_y)
  distance2 = (extreme2_x - com_x)*(extreme2_x - com_x) + (extreme2_y - com_y)*(extreme2_y - com_y)
  if distance1 &gt; distance2: 
    nosepositionx = extreme1_x
  elif distance2 &gt; distance1:
    nosepositionx = extreme2_x
  else: nosepositionx = globalx
  globalx = nosepositionx
  return nosepositionx</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globaly = 0
import math

@returns(int)
def process(value):
  global globaly
  com_x = value.Item1.Item1
  com_y = value.Item1.Item2
  extreme1_x = value.Item2.Item1
  extreme1_y = value.Item2.Item2
  extreme2_x = value.Item3.Item1
  extreme2_y = value.Item3.Item2

  distance1 = abs((extreme1_x - com_x)*(extreme1_x - com_x)) + abs((extreme1_y - com_y)*(extreme1_y - com_y))
  distance2 = abs((extreme2_x - com_x)*(extreme2_x - com_x)) + abs((extreme2_y - com_y)*(extreme2_y - com_y))
  if distance1 &gt; distance2: 
    nosepositiony = extreme1_y
  elif distance2 &gt; distance1:
    nosepositiony = extreme2_y
  else: nosepositiony = globaly
  globaly = nosepositiony
  return nosepositiony</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globalx = 0
import math

@returns(int)
def process(value):
  global globalx
  com_x = value.Item1.Item1
  com_y = value.Item1.Item2
  extreme1_x = value.Item2.Item1
  extreme1_y = value.Item2.Item2
  extreme2_x = value.Item3.Item1
  extreme2_y = value.Item3.Item2

  distance1 = (extreme1_x - com_x)*(extreme1_x - com_x) + (extreme1_y - com_y)*(extreme1_y - com_y)
  distance2 = (extreme2_x - com_x)*(extreme2_x - com_x) + (extreme2_y - com_y)*(extreme2_y - com_y)
  if distance1 &gt; distance2: 
    headpositionx = extreme2_x
  elif distance2 &gt; distance1:
    headpositionx = extreme1_x
  else: headpositionx = globalx
  globalx = headpositionx
  return headpositionx</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globaly = 0
import math

@returns(int)
def process(value):
  global globaly
  com_x = value.Item1.Item1
  com_y = value.Item1.Item2
  extreme1_x = value.Item2.Item1
  extreme1_y = value.Item2.Item2
  extreme2_x = value.Item3.Item1
  extreme2_y = value.Item3.Item2

  distance1 = abs((extreme1_x - com_x)*(extreme1_x - com_x)) + abs((extreme1_y - com_y)*(extreme1_y - com_y))
  distance2 = abs((extreme2_x - com_x)*(extreme2_x - com_x)) + abs((extreme2_y - com_y)*(extreme2_y - com_y))
  if distance1 &gt; distance2: 
    headpositiony = extreme2_y
  elif distance2 &gt; distance1:
    headpositiony = extreme1_y
  else: headpositiony = globaly
  globaly = headpositiony
  return headpositiony</q2:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globalx = 0
import math

@returns(int)
def process(value):
  global globalx
  if math.isnan(value) == True:
    x = globalx
  if value == 0:
    x = globalx
  if math.isnan(value) == False:
    if value != 0:
      x = value
      globalx = x
  return x</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globaly = 0
import math

@returns(int)
def process(value):
  global globaly
  if math.isnan(value) == True:
    y = globaly
  if value == 0:
    y = globaly
  if math.isnan(value) == False:
    if value != 0:
      y = value
      globaly = y
  return y</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globalx = 0
import math

@returns(int)
def process(value):
  global globalx
  if math.isnan(value) == True:
    x = globalx
  if value == 0:
    x = globalx
  if math.isnan(value) == False:
    if value != 0:
      x = value
      globalx = x
  return x</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globaly = 0
import math

@returns(int)
def process(value):
  global globaly
  if math.isnan(value) == True:
    y = globaly
  if value == 0:
    y = globaly
  if math.isnan(value) == False:
    if value != 0:
      y = value
      globaly = y
  return y</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globalx = 0
import math

@returns(int)
def process(value):
  global globalx
  if math.isnan(value) == True:
    x = globalx
  if value == 0:
    x = globalx
  if math.isnan(value) == False:
    if value != 0:
      x = value
      globalx = x
  return x</q2:Script>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>globaly = 0
import math

@returns(int)
def process(value):
  global globaly
  if math.isnan(value) == True:
    y = globaly
  if value == 0:
    y = globaly
  if math.isnan(value) == False:
    if value != 0:
      y = value
      globaly = y
  return y</q2:Script>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Centroid.X</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Centroid.Y</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.X</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Y</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.X</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Y</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item1</Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionExtremes">
          <q1:Method>Horizontal</q1:Method>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FindContours">
          <q1:Mode>External</q1:Mode>
          <q1:Method>ChainApproxNone</q1:Method>
          <q1:Offset>
            <q1:X>0</q1:X>
            <q1:Y>0</q1:Y>
          </q1:Offset>
          <q1:MinArea xsi:nil="true" />
          <q1:MaxArea xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Threshold">
          <q1:ThresholdValue>51</q1:ThresholdValue>
          <q1:MaxValue>255</q1:MaxValue>
          <q1:ThresholdType>BinaryInv</q1:ThresholdType>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Grayscale" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FindContours">
          <q1:Mode>External</q1:Mode>
          <q1:Method>ChainApproxNone</q1:Method>
          <q1:Offset>
            <q1:X>0</q1:X>
            <q1:Y>0</q1:Y>
          </q1:Offset>
          <q1:MinArea>30</q1:MinArea>
          <q1:MaxArea xsi:nil="true" />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:HsvThreshold">
          <q1:Lower>
            <q1:Val0>0</q1:Val0>
            <q1:Val1>60</q1:Val1>
            <q1:Val2>69</q1:Val2>
            <q1:Val3>0</q1:Val3>
          </q1:Lower>
          <q1:Upper>
            <q1:Val0>29</q1:Val0>
            <q1:Val1>255</q1:Val1>
            <q1:Val2>255</q1:Val2>
            <q1:Val3>255</q1:Val3>
          </q1:Upper>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:CameraCapture">
          <q1:Index>10</q1:Index>
          <q1:CaptureProperties />
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:TextWriter">
          <q3:FileName>C:\Users\lab\Desktop\Prey Capture\Bonsai Tracking Data\run 2.txt</q3:FileName>
          <q3:Suffix>FileCount</q3:Suffix>
          <q3:Buffered>true</q3:Buffered>
          <q3:Overwrite>false</q3:Overwrite>
          <q3:Append>false</q3:Append>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="CombineLatest" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:ConvertColor">
          <q1:Conversion>Bgr2Hsv</q1:Conversion>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:HsvThreshold">
          <q1:Lower>
            <q1:Val0>82</q1:Val0>
            <q1:Val1>100</q1:Val1>
            <q1:Val2>50</q1:Val2>
            <q1:Val3>0</q1:Val3>
          </q1:Lower>
          <q1:Upper>
            <q1:Val0>150</q1:Val0>
            <q1:Val1>255</q1:Val1>
            <q1:Val2>255</q1:Val2>
            <q1:Val3>255</q1:Val3>
          </q1:Upper>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:FindContours">
          <q1:Mode>External</q1:Mode>
          <q1:Method>ChainApproxNone</q1:Method>
          <q1:Offset>
            <q1:X>0</q1:X>
            <q1:Y>0</q1:Y>
          </q1:Offset>
          <q1:MinArea>5</q1:MinArea>
          <q1:MaxArea>100</q1:MaxArea>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:BinaryRegionAnalysis" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:LargestBinaryRegion" />
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Centroid</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:VideoWriter">
          <q1:FileName>C:\Users\lab\Desktop\Prey Capture\Bonsai Tracking Data\run 2.avi</q1:FileName>
          <q1:Suffix>FileCount</q1:Suffix>
          <q1:Buffered>true</q1:Buffered>
          <q1:Overwrite>false</q1:Overwrite>
          <q1:FourCC>FMP4</q1:FourCC>
          <q1:FrameRate>30</q1:FrameRate>
          <q1:FrameSize>
            <q1:Height>0</q1:Height>
            <q1:Width>0</q1:Width>
          </q1:FrameSize>
          <q1:ResizeInterpolation>NearestNeighbor</q1:ResizeInterpolation>
        </Combinator>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>35</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>46</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>37</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>37</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>2</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>39</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>2</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>5</From>
        <To>39</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>39</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>3</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>39</To>
        <Label>Source4</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>6</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>7</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>9</From>
        <To>37</To>
        <Label>Source4</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>8</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>8</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>13</From>
        <To>9</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>14</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>10</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>11</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>18</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>21</From>
        <To>15</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>23</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>18</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>19</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>21</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>26</From>
        <To>22</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>26</From>
        <To>23</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>27</From>
        <To>24</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>28</From>
        <To>25</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>28</From>
        <To>26</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>29</From>
        <To>27</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>30</From>
        <To>28</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>31</From>
        <To>29</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>32</From>
        <To>30</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>33</From>
        <To>31</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>34</From>
        <To>32</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>35</From>
        <To>34</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>36</From>
        <To>33</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>36</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>36</From>
        <To>37</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>36</From>
        <To>40</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>37</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>39</From>
        <To>38</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>40</From>
        <To>41</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>41</From>
        <To>42</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>42</From>
        <To>43</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>43</From>
        <To>44</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>44</From>
        <To>45</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>45</From>
        <To>39</To>
        <Label>Source5</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Vision.ConvertColor, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionExtremes, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Threshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.HsvThreshold, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.CameraCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.TextWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.VideoWriter, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>